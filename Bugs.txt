File for keeping track of bugs


Sun May 17 - Not Applicable (Temporarily removed animations) (Command system bug)
1. Walk in direction A press and holding Key A.key
2. Press and hold opposite direction B.key
--- Walk in place
3. Let go of direction B.key
--- Moonwalk backwards


Wed May 27 - Closed; Doesn't affect logic (Passing key event)
1.  In SettingState.cc, std::cout event.key.code before container.handlevent
2.  Press A, B, or C; it will pass three times: A, F13, A
Associated as (the ones discovered):
- A F13 (index 0, index 97 enum)
- B->F14 (1, 98)
- C->F15 (2, 99)
- D->"Pause" key (3, 100)
- Return -> N (58, 13)


Sun May 31st - Fixed (Can't move sprite)
Unable to reproduced - Sometimes upon starting game player sprite can't move; no consistent sequence or timing of key presses/releases to reach this bug.
Update: This seems to be due to some inconsistency among the receiver value.  Details or solution to come.

Fix:
- sideOfHero was uninitialized
- In function Hero::getReceiver(), the unsigned int being returned was inconsistent; this return value depended on sideOfHero
- Still unsure why sometimes values inside the switch statement for getReceiver was considered:

unsigned int Hero::getReceiver() const {

	switch (sideOfHero) {

		case Hero::heroFaction::Player:
			return Receiver::PlayerHero;

		case Hero::heroFaction::Ally:
			return Receiver::AlliedHero;

		case Hero::heroFaction::Opposition:
			return Receiver::EnemyHero;
	}
}


Sat June 6 - Fixed (Duplicate Entities)

1. One arrow is created, two are being checked for collisions despite using std::set and std::minmax 

Fixes - Handle collision is being called repeatedly (only shows twice because enemy is destroyed after two calls.)  Priority is to properly damage and remove the projectile.

2. During projectile.damage() call in world, not the same projectile in play (revealed in hitpoints check)

Fix:
- Both fixed; called isDead() from Projectile::damage() to test, and it calls Hero::isDead() instead of Projectile::isDead().  Traced to World.cc where I accidentally cast *pair.first (Hero class) instead of *pair.second (Projectile class) to be the projectile.  Haha...woops.